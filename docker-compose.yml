version: '3.8'

networks:
  arch:

services:
  auth_db:
    image: postgres:16.1-alpine3.19
    container_name: auth_db
    ports:
      - "5432:5432"
    volumes:
      - ./deploy/auth_db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d auth -U auth_user_app" ]
      interval: 2s
      timeout: 2s
      retries: 10
    networks: [ arch ]


# infra -------------------------------------------------------------------------------------------

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
      - "2181:2181"
    networks: [ arch ]

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.0
    container_name: schema-registry
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
    ports:
      - "8085:8085"
    networks: [ arch ]

  kafka:
    image: confluentinc/cp-enterprise-kafka:7.6.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      # Exposes 29092 for external connections to the broker
      # Use kafka:9092 for connections internal on the docker network
      # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schema-registry:8085"
      KAFKA_JMX_PORT: 9991
      #KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
    networks: [ arch ]

  kafka-topics-generator:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka-topics-generator
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic registered-users --replication-factor 1 --partitions 2

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
    networks: [ arch ]

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks: [ arch ]

  kafka-rest:
    image: confluentinc/cp-kafka-rest:7.6.0
    container_name: kafka-rest
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_REST_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8085"
      KAFKA_REST_HOST_NAME: kafka-rest
      KAFKA_REST_DEBUG: "true"
    ports:
      - "8082:8082"
    networks: [ arch ]

#  ksql-server:
#    image: confluentinc/cp-ksql-server:7.6.0
#    container_name: ksql-server
#    ports:
#      - "8088:8088"
#    depends_on:
#      - kafka
#      - zookeeper
#      - schema-registry
#    environment:
#      KSQL_BOOTSTRAP_SERVERS: kafka:9092
#      KSQL_LISTENERS: http://0.0.0.0:8088
#      KSQL_KSQL_SERVICE_ID: kafka_server
#      KSQL_CUB_KAFKA_TIMEOUT: 300
#      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8085
#      KSQL_KSQL_COMMIT_INTERVAL_MS: 2000
#      KSQL_KSQL_CACHE_MAX_BYTES_BUFFERING: 10000000
#      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: earliest
#    networks: [ arch ]
#
#  ksql-cli:
#    image: confluentinc/cp-ksql-cli:7.6.0
#    container_name: ksql-cli
#    depends_on:
#      - ksql-server
#    networks: [ arch ]